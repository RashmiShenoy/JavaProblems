package org.algorithms;

/*The first term is "1"

Second term is "11", generated by reading first term as "One 1" 
(There is one 1 in previous term)

Third term is "21", generated by reading second term as "Two 1"

Fourth term is "1211", generated by reading third term as "One 2 One 1" 

and so on 
Sequence - 1, 11, 21, 1211, 111221, 312211, 13112221, 1113213211, â€¦ 

*/
public class CountAndSay {

	static String countandSay(int n) {
		//Edge cases set value for first two digits
		String n1 = "1";
		String n2 = "11";
		if (n==1) return "1";
		if (n==2) return "11";
		String str = "11";
		System.out.print(n1 + ", " + n2);
		//Start from 3 and read previous value
		for (int i=3; i<=n; i++) {
			// In below for loop, previous character is processed in
	        // current iteration. That is why a dummy character is
	        // added to make sure that loop runs one extra iteration.
			str += '$';
			int len = str.length();
			int count = 1;
			String temp = "";
			char[] arr = str.toCharArray();
			
			//Process the previous term to find next term
			for(int j=1; j<len; j++) {
			// If current character doesn't match
				if(arr[j] != arr[j-1]) {
					//Append count of str[j-1] to temp
					temp += count + 0;
					temp += arr[j-1];
					count = 1;
				}
				//Increment if it matches
				else count++;
			}
			str = temp;
			System.out.print(", " + str);
		}
		return str;
	}
	
	public static void main(String[] args) {
		int N = 7;
		countandSay(N);
	}

}
